1. 라이브러리
import pygame  : 크로스 플랫폼 게임 개발 라이브러리
                 주 기능 - 그래픽, 사운드, 텍스트, 입력 등 게임 개발
import random  : 모듈은 난수를 생성
                 주 기능 - 빨간 네모의 랜덤 등장 난의도와 재미를 위함.
import time    : 게임 내에서 실제 시간
                 주 기능 - 시간 측정 기능을 넣음. 플레이 시간 그리고 10초 단위로 빨간 네모 증가에 영향

2. 게임의 설정
2-1 화면 설정
게임 초기화 및 설정 : pygame.init()
게임 플레이 창 설정 : width, height = 1000, 500
                    win = pygame.display.set_mode((width, height))
게임 타이틀 화면 생성 : pygame.display.set_caption("Dodge the Falling Objects")

2-2 색상 설정
검정 : black = (0, 0, 0)
흰색 : white = (255, 255, 255)
빨강 : red = (255, 0, 0)

2-3 폰트 설정 : pygame.font.init()
             font = pygame.font.SysFont("comicsans", 40)
             호환성 이슈로 영문을 쓰자.

2-4 플레이어 설정
크기 : player_size = 50
스피드 : player_speed = 40

2-5 떨어지는 물체 설정
크기 :  enemy_size = 50
스피드 :  enemy_speed = 40

2-6 음악 모듈 초기화 및 설정
pygame.mixer.init() / 음악 모듈 초기화
pygame.mixer.music.load('여기엔 음악 파일 업로드')
pygame.mixer.music.play(-1) / -1은 음악을 무한 반복 재생하는 뜻

3. 게임의 플레이어의 속성
3-1 게임 변수 초기화 함수 : def initialize_game():
    player_pos - 플레이어(나)의 위치
    enemy_pos - 빨간 네모의 위치
    score - 점수 (시간)
    start_time - 게임 시간
    game_started - 게임의 스타트 인지 (스페이스 바)
    game_over - 게임의 종료 인지
    
    player_pos = [width / 2, height - 2 * player_size] - 가로 중앙과 세로 방향으로 아래에서 두 번째 플레이어 크기 위치에 설정
    enemy_pos = [random.randint(0, width - enemy_size), 0] - 빨간 네모는 랜덤하게 나타나 되 게임 화면 안에서만 발생 한다.
    score = 0 - 점수는 0점(0초)부터 시작한다.
    start_time = 0 -위와 같음.
    game_started = False - 게임의 스타트
    game_over = False - 게임의 끝

@ 플레이타임 시각화 설정 : clock = pygame.time.Clock()

@날아오는 물체의 변수
reset_enemy : 크기, 초기 위치, 그리고 이동 방향의 설정
enemy_size - random.randint(10, 50) 적의 크기 10에서 50 안에서 랜덤으로(난이도)
edge = random.choice - 게임 화면 사방에서 등장
이때 'top', 'bottom', 'left', 'right' 방향에서는 랜덤 등장(난이도)

@ 게임 변수의 초기화 initialize_game
player_pos = [width / 2, height - 2 * player_size] : 플레이어의 시작 위치는 가로 세로 중앙에서 플레이어 두번째 크기에서 시작한다.
score, start_time = 0 게임이 시작 될때 점수와 시간을 0으로 만든다.
game_started = False, game_over = False : 게임 시작과 끝을 False로 설정.
reset_enemy(): reset_enemy - 게임이 시작 될때마다, 적의 상태 초기화, 연속되지 않게 방지한다.

마무리 initialize_game() 한번 더 해서 게임을 플레이 할 때 마다. 초기화

@ 떨어지는 물체 관리
enemies = [] 리스트 만들고 시작.
1. 떨어지는 물체 설정 (reset_enemies 함수)
2. 게임 변수 초기화 함수 수정 (initialize_game 함수)
3. 새로운 물체를 추가하는 함수 (add_enemy 함수)
enemy_size = random.randint(10, 50): 새로운 적의 크기를 10에서 50 사이의 랜덤하게 등장

@ 시작 화면 함수 (show_start_screen)
win.fill(black) - 게임의 배경 화면 색은 검정으로 한다.
title = font.render("A red box descends from the sky", True, white) - 게임의 타일틀 출력
start_message = font.render("Start : Spacebar", True, white) - 게임 설명, 스페이스바를 누르란 메세지

@ 게임 종료 화면 함수 (show_game_over_screen)
win.fill(black) - 게임의 배경 화면 색은 검정으로 한다.
game_over_message = font.render("Game Over", True, white) / score_message.get - 게임이 끝나면 메세지와 게임 플레이 타임(점수) 메세지 출력

@ 게임 루트 설정
run = True - 게임 루프는 True로 정의하며, 
while run 은 run의 값이 True일 때 계속 반복한다.

@ 키 입력 처리
keys = pygame.key.get_pressed() - 키를 꾹 누르면 계속 적용 되게 하는 것.

@ 게임 오버 상태 처리
if keys[pygame.K_SPACE] 스페이스바를 누를 때
initialize_game() 이건 게임 오버 후 다시 시작.

@ 플레이어의 이동
기본적으로 플레이어는 형성 된 창 밖으로 못 나게 함.
player_pos[0] > player_speed 함수 동일 적용

if keys[pygame.K_LEFT] and player_pos[0] > player_speed:
player_pos[0] -= player_speed

if keys[pygame.K_RIGHT] and player_pos[0] < width - player_size:
player_pos[0] += player_speed

if keys[pygame.K_UP] and player_pos[1] > player_speed:
player_pos[1] -= player_speed

if keys[pygame.K_DOWN] and player_pos[1] < height - player_size:
player_pos[1] += player_speed

@ 시간에 따라 새로운 물체 추가
elapsed_time = time.time() - start_time - 시간을 측정하는 코드
if len(enemies) < elapsed_time // 10 + 1 - 시간이 10초보다 1 높을 경우 적의 수 추가 add_enemy()(난이도)

@ 충돌 검사
if player_pos[0] < enemy['pos'][0] + enemy['size'] and player_pos[0] + player_size > enemy['pos'][0]:
if player_pos[1] < enemy['pos'][1] + enemy['size'] and player_pos[1] + player_size > enemy['pos'][1]:
플레이어와 빨간 네모의 X축과 Y축이 겹쳐지는 걸 확인하는 내용.

@ 플레이 중 진행 상황 측정.
win.blit(time_text, (10, 10))
화면의 왼쪽 상단 모서리에서 오른쪽으로 10픽셀, 아래로 10픽셀 떨어진 위치한다.